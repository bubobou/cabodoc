[{"id":0,"href":"/cabodoc/Data-Model-Acces/baseModel/","title":"baseModel","parent":"Data Model Acces","content":"Extends: Data \u0026lt; Node\nDescription    modèle de data access object\nConstants Descriptions    SQLite    const SQLite: NativeScript = preload(\u0026#34;res://addons/godot-sqlite/bin/gdsqlite.gdns\u0026#34;) Property Descriptions    db    var db dbName    var dbName: String jsonName    var jsonName: String Method Descriptions    cprint    func cprint(text: String) -\u0026gt; void copy_data_to_user    func copy_data_to_user() -\u0026gt; void connectDb    func connectDb() getLastInsertedId    func getLastInsertedId(tableName) obtenir le dernier Id inseré dans une table de la base de données, donnée en paramètre\ndeleteMultiRawByFieldInArray    func deleteMultiRawByFieldInArray(tableName, fieldName, valueArray) Signals     signal output_received(text):  "},{"id":1,"href":"/cabodoc/classes-globales/","title":"Classes globales","parent":"Documentation Carnet-de-Bord","content":""},{"id":2,"href":"/cabodoc/gestion-des-Grilles/ComCFQuestionPC/","title":"ComCFQuestionPC","parent":"Gestion des Grilles","content":"Extends: PanelContainer\nDescription    Property Descriptions    refId    var refId domaineId    var domaineId competenceIdArray    var competenceIdArray questionText    var questionText Method Descriptions    init    func init(refId, domaineId, competenceIdArray, questionText: String = \u0026#34;\u0026#34;) initialise les paramètres utilisés dans la construction de la scène Question\n"},{"id":3,"href":"/cabodoc/Data-Model-Acces/CompetenceModel/","title":"CompetenceModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table COMPETENCE\nMethod Descriptions    getCompetenceArrayByDomainId    func getCompetenceArrayByDomainId(idDomain) récupère toutes les compétences du domaine donné en paramètre\n"},{"id":4,"href":"/cabodoc/Data-Model-Acces/Data/","title":"Data","parent":"Data Model Acces","content":"Extends: Node\nDescription    mapping des noms utilisés dans le code avec les noms des tables et des champs utilisés dans la base de données\nProperty Descriptions    eleveTable    var eleveTable: String eleveId    var eleveId: String eleveNom    var eleveNom: String elevePrenom    var elevePrenom: String groupeTable    var groupeTable: String groupeId    var groupeId: String groupeNom    var groupeNom: String eleveGroupPivotTable    var eleveGroupPivotTable: String eleveGroupPivotEleveId    var eleveGroupPivotEleveId: String eleveGroupPivotGroupeId    var eleveGroupPivotGroupeId: String grilleTable    var grilleTable: String grilleId    var grilleId: String grilleName    var grilleName: String questionTable    var questionTable: String questionId    var questionId: String questionText    var questionText: String questionReferentielId    var questionReferentielId: String questionDomainId    var questionDomainId: String grilleQuestionPivotTable    var grilleQuestionPivotTable: String grilleQuestionPivotQuestionId    var grilleQuestionPivotQuestionId: String grilleQuestionPivotGrilleId    var grilleQuestionPivotGrilleId: String referentielTable    var referentielTable: String referentielId    var referentielId: String referentielCycle    var referentielCycle: String referentielNiveau    var referentielNiveau: String referentielDiscipline    var referentielDiscipline: String referentielType    var referentielType: String domaineTable    var domaineTable: String domaineId    var domaineId: String domaineNom    var domaineNom: String domainReferentielId    var domainReferentielId: String competenceTable    var competenceTable: String competenceId    var competenceId: String competenceCapacite    var competenceCapacite: String competenceConnaissance    var competenceConnaissance: String competenceType    var competenceType: String competenceDomaineId    var competenceDomaineId: String competenceEditText    var competenceEditText: String questionCompetencePivotTable    var questionCompetencePivotTable: String questionCompetencePivotQuestionId    var questionCompetencePivotQuestionId: String questionCompetencePivotCompetenceId    var questionCompetencePivotCompetenceId: String evaluationTable    var evaluationTable: String evaluationId    var evaluationId: String evaluationGrilleId    var evaluationGrilleId: String evaluationGroupeId    var evaluationGroupeId: String evaluationDate    var evaluationDate: String positionTable    var positionTable: String positionEleveId    var positionEleveId: String positionEvaluationId    var positionEvaluationId: String positionQuestionId    var positionQuestionId: String positionCompetenceId    var positionCompetenceId: String positionValue    var positionValue: String "},{"id":5,"href":"/cabodoc/data-model-acces/","title":"Data Model Acces","parent":"Documentation Carnet-de-Bord","content":""},{"id":6,"href":"/cabodoc/","title":"Documentation Carnet-de-Bord","parent":"","content":""},{"id":7,"href":"/cabodoc/Data-Model-Acces/DomaineModel/","title":"DomaineModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table DOMAINE\nMethod Descriptions    getDomaineByRefId    func getDomaineByRefId(refId) récupère tous les domaines du référentiel donné en paramètre\n"},{"id":8,"href":"/cabodoc/gestion-des-Eleves/eAjoCFSaveB/","title":"eAjoCFSaveB","parent":"Gestion des Eleves","content":"Extends: Button\nDescription    gère le bouton de sauvegarde de l\u0026rsquo;élève\nProperty Descriptions    eleveModel    var eleveModel formNode    var formNode eleveForm    var eleveForm Method Descriptions    getEleveDic    func getEleveDic() getEleveId    func getEleveId() getEleveGroupes    func getEleveGroupes() recuperer les groupes de l\u0026rsquo;eleve et remplir le eleveForm dic for validation\ngetEleveNom    func getEleveNom() recuperer le nom de l\u0026rsquo;eleve et remplir le eleveForm dic for validation\ngetElevePrenom    func getElevePrenom() recuperer le prenom de l\u0026rsquo;eleve et remplir le eleveForm dic for validation\n"},{"id":9,"href":"/cabodoc/gestion-des-Eleves/eleCLRLTextB/","title":"eleCLRLTextB","parent":"Gestion des Eleves","content":"Extends: Button\nDescription    gère l\u0026rsquo;action clique sur le nom de l\u0026rsquo;élève'\n"},{"id":10,"href":"/cabodoc/gestion-des-Eleves/eleCLVBC/","title":"eleCLVBC","parent":"Gestion des Eleves","content":"Extends: VBoxContainer\nDescription    gère la liste des élèves\nProperty Descriptions    eleveModel    var eleveModel Method Descriptions    fillRawData    func fillRawData(eleveDic) fillId    func fillId(rawNode, id) fillName    func fillName(rawNode, name) fillGroupes    func fillGroupes(rawNode, groupes) "},{"id":11,"href":"/cabodoc/gestion-des-Evaluations/evalAjoPC/","title":"evalAjoPC","parent":"Gestion des Evaluations","content":"Extends: PanelContainer\nDescription    gère la page d\u0026rsquo;ajout de création d\u0026rsquo;une évaluation\nProperty Descriptions    calendar_button_node    var calendar_button_node date_label_node    var date_label_node Method Descriptions    get_date    func get_date(date_obj) "},{"id":12,"href":"/cabodoc/gestion-des-Evaluations/EvalCLVBC/","title":"EvalCLVBC","parent":"Gestion des Evaluations","content":"Extends: VBoxContainer\nDescription    gère la liste des évaluations\nProperty Descriptions    evaluationModel    var evaluationModel grilleModel    var grilleModel groupeModel    var groupeModel Method Descriptions    fillEvaluationRaws    func fillEvaluationRaws(evalDic) remplit les lignes de la liste de grilles\nfillGroupeName    func fillGroupeName(rawNode, groupeText) remplit la colonne niveau de la ligne liste des grilles\nfillGrilleName    func fillGrilleName(rawNode, grilleText) remplit la colonne discipline de la ligne liste des grilles\nfillEvalDate    func fillEvalDate(rawNode, dateText) remplit le nom de la grille\nfillButtonText    func fillButtonText(buttonNode, buttonText) ajoute un texte à un bouton selon la longueur du texte\nfillEvaluationId    func fillEvaluationId(rawNode, idText) remplit grilleId\n"},{"id":13,"href":"/cabodoc/gestion-des-Evaluations/EvalGriCLRLTextB/","title":"EvalGriCLRLTextB","parent":"Gestion des Evaluations","content":"Extends: Button\nDescription    gère la sélection de la grille\n"},{"id":14,"href":"/cabodoc/gestion-des-Evaluations/EvalgrlCLVBC/","title":"EvalgrlCLVBC","parent":"Gestion des Evaluations","content":"Extends: VBoxContainer\nDescription    Property Descriptions    grilleModel    var grilleModel Method Descriptions    fillGrilleRaws    func fillGrilleRaws(grilleDic) remplit les lignes de la liste de grilles\nfillGrilleNiveau    func fillGrilleNiveau(rawNode, niveauText) remplit la colonne niveau de la ligne liste des grilles\nfillGrilleDiscipline    func fillGrilleDiscipline(rawNode, disciplineText) remplit la colonne discipline de la ligne liste des grilles\nfilGrilleName    func filGrilleName(rawNode, nameText) remplit le nom de la grille\nfillButtonText    func fillButtonText(buttonNode, buttonText) ajoute un texte à un bouton selon la longueur du texte\nfillGrilleId    func fillGrilleId(rawNode, idText) remplit grilleId\n"},{"id":15,"href":"/cabodoc/Data-Model-Acces/EvaluationModel/","title":"EvaluationModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table EVALUATION\nMethod Descriptions    getEvaluationById    func getEvaluationById(idEvaluation) getGrilleEvalById    func getGrilleEvalById(idGrille) getGroupeEvalById    func getGroupeEvalById(idGroupe) getEvaluationList    func getEvaluationList() récupère la liste des évaluations\ncreateEvaluation    func createEvaluation(evaluationDic) crée une nouvelle évaluation par insertion dans la table\ncreateNewPositionnement    func createNewPositionnement(idEvaluation) crée les entrées dans la table POSITION d\u0026rsquo;après les données de l\u0026rsquo;évaluation\n"},{"id":16,"href":"/cabodoc/gestion-des-Groupes/gAjoCFSaveB/","title":"gAjoCFSaveB","parent":"Gestion des Groupes","content":"Extends: Button\nDescription    gère le bouton de sauvegarde du groupe\nProperty Descriptions    formNode    var formNode groupForm    var groupForm Method Descriptions    getGroupeDic    func getGroupeDic() getGroupeId    func getGroupeId() getGroupeNom    func getGroupeNom() "},{"id":17,"href":"/cabodoc/gestion-des-eleves/","title":"Gestion des Eleves","parent":"Documentation Carnet-de-Bord","content":""},{"id":18,"href":"/cabodoc/gestion-des-evaluations/","title":"Gestion des Evaluations","parent":"Documentation Carnet-de-Bord","content":""},{"id":19,"href":"/cabodoc/gestion-des-grilles/","title":"Gestion des Grilles","parent":"Documentation Carnet-de-Bord","content":""},{"id":20,"href":"/cabodoc/gestion-des-groupes/","title":"Gestion des Groupes","parent":"Documentation Carnet-de-Bord","content":""},{"id":21,"href":"/cabodoc/gestion-du-positionnement/","title":"Gestion du Positionnements","parent":"Documentation Carnet-de-Bord","content":""},{"id":22,"href":"/cabodoc/classes-globales/Global/","title":"Global","parent":"Classes globales","content":"Extends: Node\nDescription    variables globales utilisées partout dans le code\nProperty Descriptions    data    var data MAX_NOM    var MAX_NOM MAX_CHAR_GRLL    var MAX_CHAR_GRLL taille maximale du nombre de caractères dans une ligne de la liste de grilles\neleveEditPage    var eleveEditPage groupeEditPage    var groupeEditPage allReferentiel    var allReferentiel domainByRefId    var domainByRefId competenceByDomainId    var competenceByDomainId grilleEditPage    var grilleEditPage dictionnaire qui contient tous les attributs utiles à la scène créer/modifier une grille\nevalEditPage    var evalEditPage dictionnaire qui contient tous les attributs utiles à la scène créer une évaluation\npositionPage    var positionPage dictionnaire qui contient tous les attributs utiles à la scène de positionnement des élèves\n"},{"id":23,"href":"/cabodoc/classes-globales/GlobalHelper/","title":"GlobalHelper","parent":"Classes globales","content":"Extends: Node\nDescription    fonctions communes utilisés partout dans tout le code\nConstants Descriptions    HOURS    const HOURS: Array = [\u0026#34;00\u0026#34;,\u0026#34;01\u0026#34;,\u0026#34;02\u0026#34;,\u0026#34;03\u0026#34;,\u0026#34;04\u0026#34;,\u0026#34;05\u0026#34;,\u0026#34;06\u0026#34;,\u0026#34;07\u0026#34;,\u0026#34;08\u0026#34;,\u0026#34;09\u0026#34;,\u0026#34;10\u0026#34;,\u0026#34;11\u0026#34;,\u0026#34;12\u0026#34;,\u0026#34;13\u0026#34;,\u0026#34;14\u0026#34;,\u0026#34;15\u0026#34;,\u0026#34;16\u0026#34;,\u0026#34;17\u0026#34;,\u0026#34;18\u0026#34;,\u0026#34;19\u0026#34;,\u0026#34;20\u0026#34;,\u0026#34;21\u0026#34;,\u0026#34;22\u0026#34;,\u0026#34;23\u0026#34;] MINUTES    const MINUTES: Array = [\u0026#34;00\u0026#34;,\u0026#34;05\u0026#34;,\u0026#34;10\u0026#34;,\u0026#34;15\u0026#34;,\u0026#34;20\u0026#34;,\u0026#34;25\u0026#34;,\u0026#34;30\u0026#34;,\u0026#34;35\u0026#34;,\u0026#34;40\u0026#34;,\u0026#34;45\u0026#34;,\u0026#34;50\u0026#34;,\u0026#34;55\u0026#34;] Property Descriptions    domaineModel    var domaineModel competenceModel    var competenceModel referentielModel    var referentielModel Method Descriptions    fillQuestionText    func fillQuestionText(qstText, questionNode) mergeDic    func mergeDic(dicOne, dicTwo) ajoute le dictionnaire 2 donné en paramètre au dictionnaire 1 donné en paramètre\nprepareInString    func prepareInString(valuesArray) prépare une chaîne de caractères SQL du IN qui contient une liste de valeurs donnés en paramètre\nfillReferentielOptionButton    func fillReferentielOptionButton(refOptionsNode, idRef: int = 0) remplit la selectbox intitulé \u0026ldquo;Référentiel\u0026rdquo; depuis la base de donnée et sélectionne le réferentiel passé en argument\ngetAllReferentiel    func getAllReferentiel() fillDomainAndCompetance    func fillDomainAndCompetance(refId, domainOptionsNode, competenceOptionsNode, domainId: int = 0, competenceIdArray: Array = 0) remplit les selectbox Domaines et Compétences à partir de la base de donnée\ngetDomaineByRefId    func getDomaineByRefId(refId) fillManyCompetence    func fillManyCompetence(idDomain, multiCompetenceNode, competenceIdArray: Array = 0) remplit les selectbox intitulés \u0026ldquo;Compétences\u0026rdquo; depuis la base de donnée et sélectionne les compétences passés en argument\ngetCompetenceArrayByDomainId    func getCompetenceArrayByDomainId(idDomain) createMultiCompetence    func createMultiCompetence(parentNode, childNumber) duplique la scène qui contient une ligne de compétence = selectbox + button (+/-)\nremoveAllChildren    func removeAllChildren(nodeObject) supprime les enfants d\u0026rsquo;un noeud donné\nfillCompetanceOptionButton    func fillCompetanceOptionButton(competanceArray, competenceOptionsNode, competenceId: int = 0) remplit la selectbox intitulé \u0026ldquo;Compétences\u0026rdquo; depuis la base de donnée et sélectionne la compétence passée en argument\nfillDomaineOptionButton    func fillDomaineOptionButton(domaineArray, domainOptionsNode, domainId: int = 0) remplit la selectbox intitulé \u0026ldquo;Domaine\u0026rdquo; depuis la base de donnée et sélectionne le domaine passé en argument\nsetChildrenNumber    func setChildrenNumber(parentNode) numérote toutes les questions du formulaire de création/modification d\u0026rsquo;une grille\nsetQuestionNumber    func setQuestionNumber(node, number) attribue un numéro à une question du formulaire de création/modification d\u0026rsquo;une grille\ndisplayForm    func displayForm(formData) met en couleur les champs requis d\u0026rsquo;un formulaire\nhighlightWrongField    func highlightWrongField(pathArray) met en couleur les champs erronnés\naddRedBorder    func addRedBorder(nodeObject) ajoute une bordure rouge\naddRedBorderToNormalStyle    func addRedBorderToNormalStyle(nodeObject) ajoute une bordure rouge au style normal\nprepareText    func prepareText(textString, maxChar: int = 0) duplicateFirstChild    func duplicateFirstChild(size, parentNode, hideZero: bool = true) multiplie ou cache le premier noeud enfant du noeud parent donné en argument, un nombre de fois donné en argument\npluckArrayOfDicByColumn    func pluckArrayOfDicByColumn(dicArray, fieldName) fillOptionButton    func fillOptionButton(optionButtonNode: OptionButton, labelArray: Array, idArray: Array, toSelectndex: int = 0) "},{"id":24,"href":"/cabodoc/gestion-des-Grilles/GriCLRLTextB/","title":"GriCLRLTextB","parent":"Gestion des Grilles","content":"Extends: Button\nDescription    gère l\u0026rsquo;action clique sur le nom de la grille\n"},{"id":25,"href":"/cabodoc/gestion-des-Grilles/GriFMiddleB/","title":"GriFMiddleB","parent":"Gestion des Grilles","content":"Extends: Button\nDescription    "},{"id":26,"href":"/cabodoc/Data-Model-Acces/GrilleModel/","title":"GrilleModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table GRILLE\nMethod Descriptions    deleteGrille    func deleteGrille(idGrille) deleteGrilleQuestions    func deleteGrilleQuestions(idGrille) deleteGrilleRaw    func deleteGrilleRaw(idGrille) getGrilleById    func getGrilleById(idGrille) récupère le nom de la grille par idGrille passé en argument\ngetGrilleList    func getGrilleList() récupère la liste des grilles avec leur référentiel associé\ngetGrilleWithoutQuestion    func getGrilleWithoutQuestion(grillIdWithQuestion) récupère les grilles qui n\u0026rsquo;ont pas de questions\ntransformGrille    func transformGrille(grilleArray) prepareGrilleList    func prepareGrilleList(grilleRefLinkArray) construit la liste de grille à partir des données du résultat de la requête qui lie la grille aux référentiels\ninsertUniqueValueInArray    func insertUniqueValueInArray(desArray, value) insère une valeur dans un tableau seulement si celle-ci n\u0026rsquo;est déjà pas présente\ninitializeGrlRefRaw    func initializeGrlRefRaw(dic, field) initialise le champ passé en argument, du dictionnaire passé en argument avec la structure ligne de la liste de grille\nnvEtDscToString    func nvEtDscToString(grilleList) transforme les tableaux niveaux et disciplines en chaîne de caractère pour chaque élément dans la liste des grilles donnés en paramètre\narrayToString    func arrayToString(givenArray) transforme les valeurs d\u0026rsquo;un tableau en une chaîne de caractère séparé par une virgule\nsaveGrille    func saveGrille(grilleDic) crée ou modifie la grille donné en paramètre\nupdateGrille    func updateGrille(grilleDic) updateGrilleRaw    func updateGrilleRaw(grilleDic) createGrille    func createGrille(grilleDic) crée une nouvelle grille et relie les questions et les compétences passé en argument\ninsertGrilleRaw    func insertGrilleRaw(grilleDic) insère une nouvelle ligne dans la table GRILLE de la base de donnée\n"},{"id":27,"href":"/cabodoc/gestion-des-Grilles/GrlAjoCFMultiSelectOB/","title":"GrlAjoCFMultiSelectOB","parent":"Gestion des Grilles","content":"Extends: OptionButton\nDescription    gère l\u0026rsquo;action de selection d\u0026rsquo;un référentiel dans le formulaire créer/mmodifier une grille\nProperty Descriptions    domaineModel    var domaineModel "},{"id":28,"href":"/cabodoc/gestion-des-Grilles/GrlAjoCFQAddB/","title":"GrlAjoCFQAddB","parent":"Gestion des Grilles","content":"Extends: Button\nDescription    gère le bouton d\u0026rsquo;ajout de question\nMethod Descriptions    duplicateQuestionScene    func duplicateQuestionScene(toDuplicateNode) duplique la scène parente du formulaire de question\ngetCompetenceArray    func getCompetenceArray(toDuplicateNode) récupérer le ou les id des compétences sélectionnées de la question à dupliquer\n"},{"id":29,"href":"/cabodoc/gestion-des-Grilles/grlAjoCFQRemoveB/","title":"grlAjoCFQRemoveB","parent":"Gestion des Grilles","content":"Extends: Button\nDescription    supprime une question à l\u0026rsquo;appui sur son bouton - (moins)\n"},{"id":30,"href":"/cabodoc/gestion-des-Grilles/GrlAjoCFQSDomainOB/","title":"GrlAjoCFQSDomainOB","parent":"Gestion des Grilles","content":"Extends: OptionButton\nDescription    gère l\u0026rsquo;action de selection d\u0026rsquo;un référentiel dans le formulaire créer/modifier une grille\n"},{"id":31,"href":"/cabodoc/gestion-des-Grilles/GrlAjoCFSaveB/","title":"GrlAjoCFSaveB","parent":"Gestion des Grilles","content":"Extends: Button\nDescription    gère le bouton \u0026ldquo;Enregistrer grille\u0026rdquo;\nProperty Descriptions    grilleModel    var grilleModel instance du data object acces grilleModel\nformNode    var formNode noeud du formulaire grlAjoCForm-VBC\ngrilleForm    var grilleForm Method Descriptions    getGrilleDic    func getGrilleDic() collecte la structure de donnée grille à partir du formulaire de grille\ngetGrilleQuestions    func getGrilleQuestions() récupère un tableau des questions à partir du formulaire grille\ngetQuestionDic    func getQuestionDic(questionNode) récupère la structure de donnée d\u0026rsquo;une question\ngetCompetenceIds    func getCompetenceIds(questionNode) récupère les compétences d\u0026rsquo;une question\ngetIdCompetence    func getIdCompetence(competenceRaw) récupère et valide competenceId\ngetQuestionDomainlId    func getQuestionDomainlId(questionNode) récupère et valide le DomainId d\u0026rsquo;une question\ngetQuestionReferentielId    func getQuestionReferentielId(questionNode) récupère et valide le ReferentielId d\u0026rsquo;une question\ngetQuestionText    func getQuestionText(questionNode) récupère et valide l\u0026rsquo;intitulé de la question\ngetQuestionId    func getQuestionId(questionNode) récupère QuestionId\ngetGrilleId    func getGrilleId() récupère GrilleId\ngetGrilleName    func getGrilleName() récupère et valide le nom de la grille\n"},{"id":32,"href":"/cabodoc/gestion-des-Grilles/GrlAjoPC/","title":"GrlAjoPC","parent":"Gestion des Grilles","content":"Extends: PanelContainer\nDescription    gère la page d\u0026rsquo;ajout et de modification d\u0026rsquo;une grille\nProperty Descriptions    grilleModel    var grilleModel pivotGrlQstModel    var pivotGrlQstModel Method Descriptions    fillGrilleForm    func fillGrilleForm(idGrille) remplit le formulaire de modification d\u0026rsquo;une grille donnée en argument\nremoveLoadedQuestionNode    func removeLoadedQuestionNode(qstFormNode) supprime le formulaire d\u0026rsquo;ajout de question\nfillQuestions    func fillQuestions(questionArray, qstFormNode) remplit les questions dans le formulaire récupérée de la base de donnée\nfillQuestionId    func fillQuestionId(qstId, questionNode) remplit QuestionId dans un champ caché\nfillGrilleName    func fillGrilleName(grilleName) remplit le champ nom de la grille passé en argument\nfillIdGrille    func fillIdGrille(idGrille) remplit le champ idGrille\neditPageTitle    func editPageTitle() change le titre de la page de création de grille en titre de modification de grille\ndisplayDeleteButton    func displayDeleteButton() display le bouton \u0026ldquo;supprimer grille\u0026rdquo;\n"},{"id":33,"href":"/cabodoc/gestion-des-Grilles/GrlCLVBC/","title":"GrlCLVBC","parent":"Gestion des Grilles","content":"Extends: VBoxContainer\nDescription    gère la liste des grilles\nProperty Descriptions    grilleModel    var grilleModel Method Descriptions    fillGrilleRaws    func fillGrilleRaws(grilleDic) remplit les lignes de la liste de grilles\nfillGrilleNiveau    func fillGrilleNiveau(rawNode, niveauText) remplit la colonne niveau de la ligne liste des grilles\nfillGrilleDiscipline    func fillGrilleDiscipline(rawNode, disciplineText) remplit la colonne discipline de la ligne liste des grilles\nfilGrilleName    func filGrilleName(rawNode, nameText) remplit le nom de la grille\nfillButtonText    func fillButtonText(buttonNode, buttonText) ajoute un texte à un bouton selon la longueur du texte\nfillGrilleId    func fillGrilleId(rawNode, idText) remplit grilleId\n"},{"id":34,"href":"/cabodoc/gestion-des-Groupes/groCLRLTextB/","title":"groCLRLTextB","parent":"Gestion des Groupes","content":"Extends: Button\nDescription    gère l\u0026rsquo;action clique sur le nom du groupe\n"},{"id":35,"href":"/cabodoc/gestion-des-Groupes/groCLsVBC/","title":"groCLsVBC","parent":"Gestion des Groupes","content":"Extends: VBoxContainer\nDescription    gère la liste des groupes\nProperty Descriptions    groupeModel    var groupeModel Method Descriptions    fillRawData    func fillRawData(groupesArray) fillGroupeName    func fillGroupeName(rawNode, name) fillId    func fillId(rawNode, id) "},{"id":36,"href":"/cabodoc/Data-Model-Acces/PivotGrilleQuestionModel/","title":"PivotGrilleQuestionModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access model de la table GRILLE_QUESTION_PIVOT\nMethod Descriptions    getQuestionWithCompetenceByGrilleId    func getQuestionWithCompetenceByGrilleId(idGrille) récupère toutes les questions de la grille donné en paramètre\ntransformQuestionCompetence    func transformQuestionCompetence(qstWithCmpArray) construit la structure de donnée la rubrique question\ninitializeQstDic    func initializeQstDic(qstDic, qstId) initialise la structure de donnée \u0026ldquo;question\u0026rdquo;\ngetGrilleReferentieLinked    func getGrilleReferentieLinked() récupère les données qui lient la grille aux référentiels, en passant par les questions\nlinkGrilleToManyQuestion    func linkGrilleToManyQuestion(idGrille, questionIdArray) insertManyRaws    func insertManyRaws(rawsArray) prepareRawByGrille    func prepareRawByGrille(idGrille, questionIdArray) prépare les lignes pour insertion dans la table GRILLE_QUESTION_PIVOT\nflashLinkByGrilleId    func flashLinkByGrilleId(idGrille) getQuestionByGrilleId    func getQuestionByGrilleId(idGrille) "},{"id":37,"href":"/cabodoc/Data-Model-Acces/PivotQuestionCompetenceModel/","title":"PivotQuestionCompetenceModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table QUESTION_COMPETENCE_PIVOT\nMethod Descriptions    linkQuestionToManyCompetence    func linkQuestionToManyCompetence(idQuestion, competenceArray) lie une question à plusieurs compétences\ninsertManyRaws    func insertManyRaws(rawsArray) insère plusieurs lignes dans la table QUESTION_COMPETENCE_PIVOT\nflashLinkByQuestionId    func flashLinkByQuestionId(idQuestion) supprime tous les liens de compétences de QuestionId donné en argument\nflashLinkByQuestionIdArray    func flashLinkByQuestionIdArray(questionIdArray) prepareRawByQuestion    func prepareRawByQuestion(idQuestion, competenceArray) prépare plusieurs lignes à insérer dans la table QUESTION_COMPETENCE_PIVOT\n"},{"id":38,"href":"/cabodoc/gestion-du-Positionnement/posCFCompB/","title":"posCFCompB","parent":"Gestion du Positionnements","content":"Extends: Button\nDescription    bouton d\u0026rsquo;évaluation des compétence\nProperty Descriptions    sceneNode    var sceneNode récupération du noeud de la scène \u0026ldquo;évaluation\u0026rdquo;\npositionModel    var positionModel instanciation du modèle d\u0026rsquo;accès à la table POSITIONNEMENT\nnew_style    var new_style intanciation d\u0026rsquo;un stylebox pour l\u0026rsquo;appliquer au bouton\nidEval    var idEval: String identifiant de l\u0026rsquo;évaluation (String)\nposValue    var posValue: int positionnement (niveau) de la compétence\nidQuest    var idQuest: int identifiant de la question\nidComp    var idComp: int identifiant de la compétence\ncouleurs    var couleurs: Array le tableau des couleurs attibuées au bouton selon le positionnement de la compétence\nMethod Descriptions    color_update    func color_update() modification de la couleur du bouton en fonction du niveau\non_received_data    func on_received_data(idEleve) actualisation lorsqu\u0026rsquo;une donnée est reçue (sélection d\u0026rsquo;un élève)\nSignals     signal posChange(idQuest, idComp, posValue): signal pour remonter le niveau de la compétence  "},{"id":39,"href":"/cabodoc/gestion-du-Positionnement/posCFQuestionPC/","title":"posCFQuestionPC","parent":"Gestion du Positionnements","content":"Extends: PanelContainer\nDescription    container de question pour la vue positionnement\nProperty Descriptions    boutonComp    var boutonComp labelId    var labelId labelText    var labelText questHbox    var questHbox dataQuest    var dataQuest: Dictionary dictionnnaire stockant les données de la question (id, liste de compétences)\nMethod Descriptions    eleve_selected    func eleve_selected(data) transmission des niveau des compétences de la question aux boutons \u0026ldquo;boutonComp\u0026rdquo;\nSignals     signal eleveUpdate(): signal émis lorsqu\u0026rsquo;un élève a été sélectionné  "},{"id":40,"href":"/cabodoc/gestion-du-Positionnement/posiPC/","title":"posiPC","parent":"Gestion du Positionnements","content":"Extends: PanelContainer\nDescription    gère la page de positionnement des élèves\nProperty Descriptions    questionRow    var questionRow la scene du container de question\npositionModel    var positionModel instanciation du modèle d\u0026rsquo;accès à la table POSITIONNEMENT\nelevePicker    var elevePicker questionsContainer    var questionsContainer eleveName    var eleveName posiTitle    var posiTitle selectedEleveId    var selectedEleveId: int variable contenant l\u0026rsquo;ID de l\u0026rsquo;élève sélectionné\nidEvaluation    var idEvaluation: String variable de type String contenant l\u0026rsquo;ID de l\u0026rsquo;évaluation\nidGrille    var idGrille Method Descriptions    elevePicker_init    func elevePicker_init(evaluation_id) initialise le popup de sélection avec nom de l\u0026rsquo;élève\nquestionList_init    func questionList_init(grille_id) instanciation, connexion et ajout des containers \u0026ldquo;question\u0026rdquo;\non_niveau_update    func on_niveau_update(idQuest, idComp, posValue) mise à jour du niveau d\u0026rsquo;une compétence, déclenchée par le signal \u0026ldquo;niveauChange\u0026rdquo; d\u0026rsquo;un bouton \u0026ldquo;boutonComp\u0026rdquo;\non_eleve_selected    func on_eleve_selected(id) mise à jour du nom et envoi d\u0026rsquo;un signal aux container \u0026ldquo;question\u0026rdquo; avec le positionnement de l\u0026rsquo;élève\nSignals     signal eleveSelect(data): signal émis lors de la sélection d\u0026rsquo;un élève  "},{"id":41,"href":"/cabodoc/Data-Model-Acces/positionModel/","title":"positionModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access Object à la table POSITIONNEMENT\nMethod Descriptions    getEleveList    func getEleveList(idEvaluation) récupère la liste des élèves concernés par l\u0026rsquo;évaluation\ntransformEleve    func transformEleve(eleveArray) inutile ?\ngetQuestionWithCompetenceByGrilleId    func getQuestionWithCompetenceByGrilleId(idGrille) récupère toutes les questions de la grille donnée en paramètre\ntransformQuestionCompetence    func transformQuestionCompetence(qstWithCmpArray) contruit la structure de donnée de la rubrique question\ninitializeQstDic    func initializeQstDic(qstDic, qstId) intialise la structure de donnée \u0026ldquo;question\u0026rdquo;\nupdatePosition    func updatePosition(id_eleve, id_evaluation, id_question, id_competence, position) affectation d\u0026rsquo;une nouvelle valeur de position pour la compétence évaluée\ngetPosition    func getPosition(id_eleve, id_evaluation, id_question, id_competence) récupération de la valeur d\u0026rsquo;une position correspondant à une ligne de la table POSITIONNEMENT\ngetGrilleNameById    func getGrilleNameById(idGrille) "},{"id":42,"href":"/cabodoc/Data-Model-Acces/QuestionModel/","title":"QuestionModel","parent":"Data Model Acces","content":"Method Descriptions    saveManyQuestion    func saveManyQuestion(questionArray, idGrille) sauvegarde plusieurs questions et les lient à la grille passée en argument\nsaveQuestion    func saveQuestion(questionDic) crée et met à jour une question\nupdateQuestion    func updateQuestion(questionDic) updateQuestionRaw    func updateQuestionRaw(questionDic) createQuestion    func createQuestion(questionDic) crée et lie une question aux compétences associées\ninsertQuestionRaw    func insertQuestionRaw(questionDic) insère une nouvelle ligne dans la table QUESTION\ndeleteQuestionInIdArray    func deleteQuestionInIdArray(questionIdArray) "},{"id":43,"href":"/cabodoc/Data-Model-Acces/ReferentielModel/","title":"ReferentielModel","parent":"Data Model Acces","content":"Extends: baseModel \u0026lt; Data \u0026lt; Node\nDescription    data access object de la table REFERENTIEL\nMethod Descriptions    getAllReferentiel    func getAllReferentiel() récupére tous les référentiels de la table REFERENTIEL\nprepareName    func prepareName(refArray) crée le nom du référentiel, ce nom est composé de Discipline et Niveau\n"},{"id":44,"href":"/cabodoc/categories/","title":"Categories","parent":"Documentation Carnet-de-Bord","content":""},{"id":45,"href":"/cabodoc/tags/","title":"Tags","parent":"Documentation Carnet-de-Bord","content":""}]